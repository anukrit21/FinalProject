version: '3.8'

services:
  # Database services
  postgres:
    image: postgres:13-alpine
    container_name: postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_MULTIPLE_DATABASES=demoapp_user,demoapp_mess,demoapp_menu,demoapp_admin,demoapp_otp,demoapp_auth,demoapp_campus,demoapp_owner,demoapp_subscription,demoapp_payment,demoapp_delivery
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh
    networks:
      - demoapp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped
    depends_on:
      - postgres
    networks:
      - demoapp-network

  # Message broker services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - demoapp-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - demoapp-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8070:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: demoApp
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - demoapp-network

  # Infrastructure services
  config-server:
    build:
      context: ./services/config-server
      dockerfile: Dockerfile
    container_name: config-server
    ports:
      - "8888:8888"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - demoapp-network

  discovery:
    build:
      context: ./services/discovery
      dockerfile: Dockerfile
    container_name: discovery
    ports:
      - "8761:8761"
    networks:
      - demoapp-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Application services
  user-service:
    build:
      context: ./services/user
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/demoapp_user
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=user-service
    depends_on:
      postgres:
        condition: service_healthy
      config-server:
        condition: service_healthy
      discovery:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - demoapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  mess-service:
    build:
      context: ./services/mess
      dockerfile: Dockerfile
    container_name: mess-service
    ports:
      - "8085:8085"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/demoapp_mess
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=mess-service
    depends_on:
      postgres:
        condition: service_healthy
      config-server:
        condition: service_healthy
      discovery:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - demoapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  menu-service:
    build:
      context: ./services/menu-module
      dockerfile: Dockerfile
    container_name: menu-service
    ports:
      - "8083:8083"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/demoapp_menu
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=menu-service
    depends_on:
      postgres:
        condition: service_healthy
      config-server:
        condition: service_healthy
      discovery:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - demoapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  owner-service:
    build:
      context: ./services/owner
      dockerfile: Dockerfile
    container_name: owner-service
    ports:
      - "8086:8086"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/demoapp_owner
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=owner-service
    depends_on:
      postgres:
        condition: service_healthy
      config-server:
        condition: service_healthy
      discovery:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - demoapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8086/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  admin-service:
    build:
      context: ./services/admin
      dockerfile: Dockerfile
    container_name: admin-service
    ports:
      - "8084:8084"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/demoapp_admin
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=admin-service
    depends_on:
      postgres:
        condition: service_healthy
      config-server:
        condition: service_healthy
      discovery:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - demoapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  otp-service:
    build:
      context: ./services/otp
      dockerfile: Dockerfile
    container_name: otp-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/demoapp_otp
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=otp-service
    depends_on:
      postgres:
        condition: service_healthy
      config-server:
        condition: service_healthy
      discovery:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - demoapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  auth-service:
    build:
      context: ./services/authentication
      dockerfile: Dockerfile
    container_name: auth-service
    ports:
      - "8089:8089"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/demoapp_auth
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=auth-service
    depends_on:
      postgres:
        condition: service_healthy
      config-server:
        condition: service_healthy
      discovery:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - demoapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8089/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  campus-service:
    build:
      context: ./services/campus-module
      dockerfile: Dockerfile
    container_name: campus-service
    ports:
      - "8088:8088"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/demoapp_campus
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=campus-service
    depends_on:
      postgres:
        condition: service_healthy
      config-server:
        condition: service_healthy
      discovery:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - demoapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8088/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  subscription-service:
    build:
      context: ./services/subscription
      dockerfile: Dockerfile
    container_name: subscription-service
    ports:
      - "8087:8087"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/demoapp_subscription
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=subscription-service
    depends_on:
      postgres:
        condition: service_healthy
      config-server:
        condition: service_healthy
      discovery:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - demoapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8087/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  payment-service:
    build:
      context: ./services/payment
      dockerfile: Dockerfile
    container_name: payment-service
    ports:
      - "8090:8090"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/demoapp_payment
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=payment-service
    depends_on:
      postgres:
        condition: service_healthy
      config-server:
        condition: service_healthy
      discovery:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - demoapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8090/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  delivery-service:
    build:
      context: ./services/delivery
      dockerfile: Dockerfile
    container_name: delivery-service
    ports:
      - "8091:8091"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/demoapp_delivery
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=delivery-service
    depends_on:
      postgres:
        condition: service_healthy
      config-server:
        condition: service_healthy
      discovery:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - demoapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8091/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  api-gateway:
    build: ./services/api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery:8761/eureka/
      - JWT_SECRET=${JWT_SECRET:-yourJwtSecretKey}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
    depends_on:
      config-server:
        condition: service_healthy
      discovery:
        condition: service_healthy
    networks:
      - demoapp-network
    restart: on-failure
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
  pgadmin_data:

networks:
  demoapp-network:
    driver: bridge 